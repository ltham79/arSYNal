wfuzz -h
********************************************************
* Wfuzz 3.1.0 - The Web Fuzzer                         *
*                                                      *
* Version up to 1.4c coded by:                         *
* Christian Martorella (cmartorella@edge-security.com) *
* Carlos del ojo (deepbit@gmail.com)                   *
*                                                      *
* Version 1.4d to 3.1.0 coded by:                      *
* Xavier Mendez (xmendez@edge-security.com)            *
********************************************************

Usage:  wfuzz [options] -z payload,params <url>

        FUZZ, ..., FUZnZ  wherever you put these keywords wfuzz will replace them with the values of the specified payload.
        FUZZ{baseline_value} FUZZ will be replaced by baseline_value. It will be the first request performed and could be used as a base for filtering.


Options:
        -h                        : This help
        --help                    : Advanced help
        --version                 : Wfuzz version details
        -e <type>                 : List of available encoders/payloads/iterators/printers/scripts

        -c                        : Output with colors
        -v                        : Verbose information.
        --interact                : (beta) If selected,all key presses are captured. This allows you to interact with the program.

        -p addr                   : Use Proxy in format ip:port:type. Repeat option for using various proxies.
                                    Where type could be SOCKS4,SOCKS5 or HTTP if omitted.

        -t N                      : Specify the number of concurrent connections (10 default)
        -s N                      : Specify time delay between requests (0 default)
        -R depth                  : Recursive path discovery being depth the maximum recursion level (0 default)
        -D depth                  : Maximum link depth level (4 default)
        -L, --follow              : Follow HTTP redirections

        -u url                    : Specify a URL for the request.
        -z payload                : Specify a payload for each FUZZ keyword used in the form of type,parameters,encoder.
                                    A list of encoders can be used, ie. md5-sha1. Encoders can be chained, ie. md5@sha1.
                                    Encoders category can be used. ie. url
                                    Use help as a payload to show payload plugin's details (you can filter using --slice)
        -w wordlist               : Specify a wordlist file (alias for -z file,wordlist).
        -V alltype                : All parameters bruteforcing (allvars and allpost). No need for FUZZ keyword.
        -X method                 : Specify an HTTP method for the request, ie. HEAD or FUZZ

        -b cookie                 : Specify a cookie for the requests
        -d postdata               : Use post data (ex: "id=FUZZ&catalogue=1")
        -H header                 : Use header (ex:"Cookie:id=1312321&user=FUZZ")
        --basic/ntlm/digest auth  : in format "user:pass" or "FUZZ:FUZZ" or "domain\FUZ2Z:FUZZ"

        --hc/hl/hw/hh N[,N]+      : Hide responses with the specified code/lines/words/chars (Use BBB for taking values from baseline)
        --sc/sl/sw/sh N[,N]+      : Show responses with the specified code/lines/words/chars (Use BBB for taking values from baseline)
        --ss/hs regex             : Show/Hide responses with the specified regex within the content

wfuzz -e payloads

Available payloads:

  Name            | Summary
------------------------------------------------------------------------------------------------------
  burplog         | Returns fuzz results from a Burp log.
  autorize        | Returns fuzz results' from autorize.
  burpstate       | Returns fuzz results from a Burp state.
  bing            | Returns URL results of a given bing API search (needs api key).
  wfuzzp          | Returns fuzz results' URL from a previous stored wfuzz session.
  file            | Returns each word from a file.
  list            | Returns each element of the given word list separated by -.
  stdin           | Returns each item read from stdin.
  guitab          | This payload reads requests from a tab in the GUI
  ipnet           | Returns list of IP addresses of a network.
  iprange         | Returns list of IP addresses of a given IP range.
  dirwalk         | Returns filename's recursively from a local directory.
  buffer_overflow | Returns a string using the following pattern A * given number.
  burpitem        | This payload loads request/response from items saved from Burpsuite.
  hexrand         | Returns random hex numbers from the given range.
  permutation     | Returns permutations of the given charset and length.
  range           | Returns each number of the given range.
  shodanp         | Returns URLs of a given Shodan API search (needs api key).
  hexrange        | Returns each hex number of the given hex range.
  names           | Returns possible usernames by mixing the given words, separated by -, using know
                  | n typical constructions.


wfuzz -z help
Name: burplog 0.1
Categories: default
Summary: Returns fuzz results from a Burp log.
Author: Xavi Mendez (@xmendez)
Description:
   Returns fuzz results' URL from a Burp log.
Parameters:
   + fn (= ): Filename of a valid Burp log file.
   - attr: Attribute of fuzzresult to return. If not specified the whole object is returned.


Name: autorize 0.2
Categories: default
Summary: Returns fuzz results' from autorize.
Author: Xavi Mendez (@xmendez)
Description:
   Reads burp extension autorize states
Parameters:
   + fn (= ): Filename of a valid autorize state file.
   - attr: Attribute of fuzzresult to return. If not specified the whole object is returned.


Name: burpstate 0.1
Categories: default
Summary: Returns fuzz results from a Burp state.
Author: Xavi Mendez (@xmendez)
Description:
   *ALERT*: https://portswigger.net/blog/goodbye-state-files-we-wont-miss-you

   Returns fuzz results' from a Burp saved state file. This payload's code is based on burp2xml.py:
   Developed by Paul Haas, <phaas AT redspin DOT com> under Redspin. Inc.
   Licensed under the GNU Public License version 3.0 (2008-2009)
   Process Burp Suite Professional's output into a well-formed XML document.

   Currently, the whole burp state file is read, in the future this needs to be changed to be more memory efficient.
Parameters:
   + fn (= ): Filename of a valid Burp state file.
   - attr: Fuzzresult attribute to return. If not specified the whole object is returned.
   - source (= proxy, target): A list of separated Burp sources to get the HTTP requests and responses from. It could be proxy or target tool.
   - checkversion (= False): If the Burp log file version is unknown an exception will be raised and execution will fail. Checked with burp state file version 65, 67.


Name: bing 0.2
Categories: default
Summary: Returns URL results of a given bing API search (needs api key).
Author: Xavi Mendez (@xmendez)
Description:
   intitle:"JBoss JMX Management Console"
   Some examples of bing hacking:
   http://www.elladodelmal.com/2010/02/un-poco-de-bing-hacking-i-de-iii.html
Parameters:
   + dork (= ): Google dork search string.
   - offset (= 0): Offset index, starting at zero.
   - limit (= 0): Number of results. Zero for all.


Name: wfuzzp 0.2
Categories: default
Summary: Returns fuzz results' URL from a previous stored wfuzz session.
Author: Xavi Mendez (@xmendez)
Description:
   This payload uses pickle.
   Warning: The pickle module is not intended to be secure against erroneous or maliciously constructed data.
   Never unpickle data received from an untrusted or unauthenticated source.
   See: https://blog.nelhage.com/2011/03/exploiting-pickle/
Parameters:
   + fn (= ): Filename of a valid wfuzz result file.
   - attr: Attribute of fuzzresult to return. If not specified the whole object is returned.


Name: file 0.2
Categories: default
Summary: Returns each word from a file.
Author: Carlos del Ojo,Christian Martorella,Adapted to newer versions Xavi Mendez (@xmendez)
Description:
   Returns the contents of a dictionary file line by line.
Parameters:
   + fn (= ): Filename of a valid dictionary
   - count (= True): Indicates if the number of words in the file should be counted.
   - encoding (= Auto): Indicates the file encoding.


Name: list 0.1
Categories: default
Summary: Returns each element of the given word list separated by -.
Author: Xavi Mendez (@xmendez)
Description:
   ie word1-word2
Parameters:
   + values (= ): Values separated by - to return as a dictionary.


Name: stdin 0.1
Categories: default
Summary: Returns each item read from stdin.
Author: Xavi Mendez (@xmendez)
Description:
Parameters:


Name: guitab 0.1
Categories: default
Summary: This payload reads requests from a tab in the GUI
Author: Xavi Mendez (@xmendez)
Description:
   ** This is a beta plugin for the GUI under construction.
   This payload reads requests from a tab in the GUI
Parameters:
   + tab (= ): Name of a valid GUI tab.
   - attr: Attribute of fuzzresult to return. If not specified the whole object is returned.


Name: ipnet 0.1
Categories: default
Summary: Returns list of IP addresses of a network.
Author: Xavi Mendez (@xmendez)
Description:
   ie. 192.168.1.0/24
   Requires: netaddr module
Parameters:
   + net (= ): Network range in the form ip/mask.


Name: iprange 0.1
Categories: default
Summary: Returns list of IP addresses of a given IP range.
Author: Xavi Mendez (@xmendez)
Description:
   ie. 192.168.1.0-192.168.1.12
   Requires: netaddr module
Parameters:
   + iprange (= ): IP address range int the form 192.168.1.0-192.168.1.12


Name: dirwalk 0.1
Categories: default
Summary: Returns filename's recursively from a local directory.
Author: Xavi Mendez (@xmendez)
Description:
   Returns all the file paths found in the specified directory.
   Handy if you want to check a directory structure against a webserver,
   for example, because you have previously downloaded a specific version
   of what is supposed to be on-line.
Parameters:
   + dir (= ): Directory path to walk and generate payload from.


Name: buffer_overflow 0.2
Categories: default
Summary: Returns a string using the following pattern A * given number.
Author: Xavi Mendez (@xmendez)
Description:
Parameters:
   + size (= ): Size of the overflow string.


Name: burpitem 0.1
Categories: default
Summary: This payload loads request/response from items saved from Burpsuite.
Author: Bendegúz Nagy (@PaperTsar)
Description:
   This payload loads request/response from items saved from Burpsuite.
Parameters:
   + fn (= ): Filename of a valid Burp item file.
   - attr: Attribute of fuzzresult to return. If not specified the whole object is returned.


Name: hexrand 0.1
Categories: default
Summary: Returns random hex numbers from the given range.
Author: Carlos del Ojo,Christian Martorella,Adapted to newer versions Xavi Mendez (@xmendez)
Description:
Parameters:
   + range (= ): Range of hex numbers to randomly generate in the form of 00-ff.


Name: permutation 0.1
Categories: default
Summary: Returns permutations of the given charset and length.
Author: Xavi Mendez (@xmendez)
Description:
Parameters:
   + ch (= ): Charset and len to permute in the form of abc-2.


Name: range 0.1
Categories: default
Summary: Returns each number of the given range.
Author: Carlos del Ojo,Christian Martorella,Adapted to newer versions Xavi Mendez (@xmendez)
Description:
   ie. 0-10
Parameters:
   + range (= ): Range of numbers in the form 0-10.


Name: shodanp 0.1
Categories: default
Summary: Returns URLs of a given Shodan API search (needs api key).
Author: Xavi Mendez (@xmendez)
Description:
   Queries the Shodan API
Parameters:
   + search (= ): Shodan search string.
   - page (= 0): Offset page, starting at zero.
   - limit (= 0): Number of pages (1 query credit = 100 results). Zero for all.


Name: hexrange 0.1
Categories: default
Summary: Returns each hex number of the given hex range.
Author: Carlos del Ojo,Christian Martorella,Adapted to newer versions Xavi Mendez (@xmendez)
Description:
Parameters:
   + range (= ): Range of hex numbers to generate in the form of 00-ff.


Name: names 0.1
Categories: default
Summary: Returns possible usernames by mixing the given words, separated by -, using known typical constructions.
Author: Christian Martorella,Adapted to newer versions Xavi Mendez (@xmendez)
Description:
   ie. jon-smith
Parameters:
   + name (= ): Name and surname in the form of name-surname.


filtered using the –slice parameter:

$ wfuzz -z help --slice "dirwalk"

Name: dirwalk 0.1
Categories: default
Summary: Returns filename's recursively from a local directory.
Description:
   Returns all the file paths found in the specified directory.
   Handy if you want to check a directory structure against a webserver,
   for example, because you have previously downloaded a specific version
   of what is supposed to be on-line.
Parameters:
   + dir: Directory path to walk and generate payload from.


wfuzz -e iterators

Available iterators:

  Name    | Summary
----------------------------------------------------------------------------------------------
  chain   | Returns an iterator returns elements from the first iterable until it is exhaust
          | ed, then proceeds to the next iterable, until all of the iterables are exhausted
          | .
  product | Returns an iterator cartesian product of input iterables.
  zip     | Returns an iterator that aggregates elements from each of the iterables.

wfuzz -e encoders

Available encoders:

  Category      | Name              | Summary
------------------------------------------------------------------------------------------------------------------------
  hashes        | base64            | Encodes the given string using base64
  url           | doble_nibble_hex  | Replaces ALL characters in string using the %%dd%dd escape
  url_safe, url | double_urlencode  | Applies a double encode to special characters in string using the %25xx escape.
                |                   | Letters, digits, and the characters '_.-' are never quoted.
  url           | first_nibble_hex  | Replaces ALL characters in string using the %%dd? escape
  default       | hexlify           | Every byte of data is converted into the corresponding 2-digit hex representatio
                |                   | n.
  html          | html_decimal      | Replaces ALL characters in string using the &#dd; escape
  html          | html_escape       | Convert the characters &<>" in string to HTML-safe sequences.
  html          | html_hexadecimal  | Replaces ALL characters in string using the &#xx; escape
  hashes        | md5               | Applies a md5 hash to the given string
  db            | mssql_char        | Converts ALL characters to MsSQL's char(xx)
  db            | mysql_char        | Converts ALL characters to MySQL's char(xx)
  default       | none              | Returns string without changes
  db            | oracle_char       | Converts ALL characters to Oracle's chr(xx)
  default       | random_upper      | Replaces random characters in string with its capitals letters
  url           | second_nibble_hex | Replaces ALL characters in string using the %?%dd escape
  hashes        | sha1              | Applies a sha1 hash to the given string
  hashes        | sha256            | Applies a sha256 hash to the given string
  hashes        | sha512            | Applies a sha512 hash to the given string
  url           | uri_double_hex    | Encodes ALL charachers using the %25xx escape.
  url           | uri_hex           | Encodes ALL charachers using the %xx escape.
  url           | uri_triple_hex    | Encodes ALL charachers using the %25%xx%xx escape.
  url           | uri_unicode       | Replaces ALL characters in string using the %u00xx escape
  url_safe, url | urlencode         | Replace special characters in string using the %xx escape. Letters, digits, and
                |                   | the characters '_.-' are never quoted.
  url           | utf8              | Replaces ALL characters in string using the \u00xx escape
  url           | utf8_binary       | Replaces ALL characters in string using the \uxx escape



wfuzz -e printers

Available printers:

  Name      | Summary
------------------------------------------------------------------------------------------------
  csv       | CSV printer ftw
  field     | Raw output format only showing the specified field expression. No header or foot
            | er.
  html      | Prints results in html format
  json      | Results in json format
  magictree | Prints results in magictree format
  raw       | Raw output format



wfuzz -e scripts

Available scripts:

  Category               | Name          | Summary
------------------------------------------------------------------------------------------------
  active, discovery      | sitemap       | Parses sitemap.xml file
  active, discovery      | robots        | Parses robots.txt looking for new content.
  active, discovery      | wc_extractor  | Parses subversion's wc.db file.
  info, passive          | title         | Parses HTML page title
  tools, active          | screenshot    | Performs a screen capture using linux cutycapt tool
  fuzzer, active         | backups       | Looks for known backup filenames.
  default, passive, info | errors        | Looks for error messages
  active, discovery      | cvs_extractor | Parses CVS/Entries file.
  info                   | npm_deps      | Looks for npm dependencies definition in js code
  tools                  | grep          | HTTP response grep
  active, discovery      | svn_extractor | Parses .svn/entries file.
  default, passive       | listing       | Looks for directory listing vulnerabilities
  active, discovery      | links         | Parses HTML looking for new content.
  info, passive, default | headers       | Looks for HTTP headers.
  info, passive, default | cookies       | Looks for new cookies


Specifying a payload:
Each FUZZ keyword must have its corresponding payload. There are several equivalent ways of specifying a payload:

The long way explicitly defining the payload’s parameter name through the command line:

$ wfuzz -z file --zP fn=wordlist/general/common.txt http://testphp.vulnweb.com/FUZZ
The not so long way explicitly defining the payload’s default parameter through the –zD command line option:

$ wfuzz -z file --zD wordlist/general/common.txt http://testphp.vulnweb.com/FUZZ
The not so long way defining only the value of the payload’s default parameter:

$ wfuzz -z file,wordlist/general/common.txt http://testphp.vulnweb.com/FUZZ
The short way when using the file payload alias:

$ wfuzz -w wordlist/general/common.txt http://testphp.vulnweb.com/FUZZ
The stdin payload could be used when using a external wordlist generator:

$ crunch 2 2 ab | wfuzz -z stdin http://testphp.vulnweb.com/FUZZ
Crunch will now generate the following amount of data: 12 bytes
0 MB
0 GB
0 TB
0 PB
Crunch will now generate the following number of lines: 4
********************************************************
* Wfuzz 2.2 - The Web Fuzzer                           *
********************************************************

Target: http://testphp.vulnweb.com/FUZZ
Total requests: <<unknown>>

==================================================================
ID      Response   Lines      Word         Chars          Request
==================================================================

00002:  C=404      7 L        12 W          168 Ch        "ab"
00001:  C=404      7 L        12 W          168 Ch        "aa"
00003:  C=404      7 L        12 W          168 Ch        "ba"
00004:  C=404      7 L        12 W          168 Ch        "bb"

Total time: 3.643738
Processed Requests: 4
Filtered Requests: 0
Requests/sec.: 1.097773

Multiple payloads
Several payloads can be used by specifying several -z or -w parameters and the corresponding FUZZ, … , FUZnZ keyword where n is the payload number. The following example, brute forces files, extension files and directories at the same time:

$ wfuzz -w wordlist/general/common.txt -w wordlist/general/common.txt -w wordlist/general/extensions_common.txt --hc 404 http://testphp.vulnweb.com/FUZZ/FUZ2ZFUZ3Z

Filters
Filtering results in Wfuzz is paramount:

Big dictionaries could generate a great amount of output and can easily drown out legitimate valid results.
Triaging HTTP responses is key to perform some attacks, for example, in order to check for the presence of a SQL injection vulnerability we need to distinguish a legitimate response from the one that generates an error or different data.
Wfuzz allows to filter based on the HTTP responses code and the length of the received information (in the form of words, characters or lines). Regular expressions can also be used. Two approaches can be taken: showing or hiding results matching a given filter.

Hiding responses
The following command line parameters can be used to hide certain HTTP responses “–hc, –hl, –hw, –hh”. For example, the following command filters the web resources unknown by the web server (http://en.wikipedia.org/wiki/HTTP_404):

wfuzz -w wordlist/general/common.txt --hc 404 http://testphp.vulnweb.com/FUZZ
Multiple values can be specified, for example, the following wfuzz execution adds the forbidden resources to the filter:

wfuzz -w wordlist/general/common.txt --hc 404,403 http://testphp.vulnweb.com/FUZZ
Lines, words or chars are handy when we are looking for resources with the same HTTP status code. For example, it is a common behaviour (sometimes due to misconfiguration) that web servers return a custom error page with a 200 response code, this is known as soft 404.

Below is an example:

$ wfuzz -w wordlist/general/common.txt --hc 404 http://datalayer.io/FUZZ
********************************************************
* Wfuzz 2.2 - The Web Fuzzer                           *
********************************************************

Target: http://datalayer.io/FUZZ
Total requests: 950

==================================================================
ID      Response   Lines      Word         Chars          Request
==================================================================

00000:  C=200    279 L       635 W         8972 Ch        "W3SVC3"
00001:  C=200    279 L       635 W         8972 Ch        "Log"
00002:  C=200    279 L       635 W         8972 Ch        "10"
00003:  C=200    279 L       635 W         8972 Ch        "02"
00004:  C=200    279 L       635 W         8972 Ch        "2005"
...
00024:  C=200    301 L       776 W         9042 Ch        "about"
...
Looking carefully at the above results, is easy to ascertain that all the “not found” resources have a common patter of 279 lines, 635 words and 8972 chars. Thus, we can improve our “–hc 404” filter by using this information (various filters can be combined):

$ wfuzz -w wordlist/general/common.txt --hc 404 --hh 8972  http://datalayer.io/FUZZ

00022:  C=200    301 L       776 W         9042 Ch        "about"
00084:  C=302      0 L         0 W            0 Ch        "blog"
00192:  C=302      0 L         0 W            0 Ch        "css"
...
00696:  C=200    456 L      1295 W        15119 Ch        "service"
00751:  C=200    238 L       512 W         6191 Ch        "store"
00788:  C=302      0 L         0 W            0 Ch        "text"
00913:  C=302      0 L         0 W            0 Ch        "template"
Showing responses
Showing results works the same way but using the command line parameters preceded by an “s”: “–sc, –sl, –sw, –sh”.


Using the baseline
Filters can be built against a reference HTTP response, called the “baseline”. For example, the previous command for filtering “not found” resources using the –hh switch could have be done with the following command:

$ wfuzz -w wordlist/general/common.txt --hh BBB  http://datalayer.io/FUZZ{notthere}
...
00000:  C=200    279 L       635 W         8972 Ch        "notthere"
00001:  C=200    301 L       776 W         9042 Ch        "about"
00004:  C=200    456 L      1295 W        15119 Ch        "service"
...
Here the {} defines the value of the FUZZ word for this first HTTP request, and then the response can be used specifying “BBB” as a filter value.


Regex filters
The command line parameters “–ss” and “–hs” allow to filter the responses using a regular expression against the returned content. For example, the following allows to find web servers vulnerable to “shellshock” (see http://edge-security.blogspot.co.uk/2014/10/scan-for-shellshock-with-wfuzz.html for more information):

$ wfuzz -H "User-Agent: () { :;}; echo; echo vulnerable" --ss vulnerable -w cgis.txt http://localhost:8000/FUZZ

A valid python regex should be used within these switches or an error will be prompted:
$ wfuzz -w wordlist/general/common.txt --hs "error)"  http://testphp.vulnweb.com/FUZZ

Fatal exception: Invalid regex expression: unbalanced parenthesis



EXAMPLES:
Directory Enumeration: Find hidden directories on a web server.
wfuzz -c -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt --hc 404 http://example.com/FUZZ

Parameter Fuzzing: Test for vulnerable parameters in a URL.
wfuzz -c -w /path/to/wordlist.txt --hc 404 "http://example.com/search?query=FUZZ"

Brute-Forcing Authentication: Attempt to brute-force a login form.
wfuzz -c -w /usr/share/wordlists/rockyou.txt -X POST -d "username=admin&password=FUZZ" http://example.com/login

File Upload Testing: Test a file upload form.
wfuzz -c -w /path/to/extensions.txt -X POST -F "file=@FUZZ" http://example.com/upload